generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// ------------------------------ USER --------------------------------
model User {
  id             String            @id @default(cuid()) @map("_id")
  userId         String            
  name           String
  email          String            @unique
  image          String            @default("https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSzBXNuO6PezhC18aYH_2cYtS0I7KbxoKYdwA&s")
  country        String
  monthlyAdSpend String?
  whyPerformance String[]          @default([])
  phoneNumber    String
  role           Role              @default(NONE)
  // Relations 
  TestTxns       TestTransaction[]
  Accounts       Account[]
  notifications  notification[]
  wallets        CreditAccount[]
  invoice        invoice[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserList {
  id        String   @id @default(cuid()) @map("_id")
  adminId   String
  name      String
  email     String   @unique
  role      UserRole @default(Admin)
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ------------------------------ TEST TRANSACTION --------------------------------
model TestTransaction {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  amount    Int
  currency  String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  status    STATUS
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ------------------------------ ACCOUNT --------------------------------
model Account {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String
  phoneNumber   String
  model         ACCMODEL
  type          ADACCOUNT
  balance       Float
  creditAccount String
  currency      String
  timezone      String
  weblink       String
  AddLink       String?   @unique
  status        STATUS    @default(PENDING)
  AccName       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountTxns AccountTxns[] // One-to-many relationship with AccountTxns
}

// ------------------------------ ACCOUNT TRANSACTIONS --------------------------------
model AccountTxns {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  Acc_id    String   @db.ObjectId
  account   Account  @relation(fields: [Acc_id], references: [id], onDelete: Cascade) // Relation to Account
  type      String
  creditAcc String
  amount    Int
  status    STATUS   @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ------------------------------ CREDIT ACCOUNT --------------------------------
model CreditAccount {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  currency  String
  balance   Float
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transactions CreditTxns[]
}

model CreditTxns {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  currency     String
  payment_mode String
  amount       Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  accountId String?        @db.ObjectId
  account   CreditAccount? @relation(fields: [accountId], references: [id], onDelete: Cascade)
}

// ------------------------------ ANALYTICS --------------------------------
model MonthlyStats {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  month          String
  year           String
  orders         Int?     @default(0)
  collectedFunds Int?     @default(0)
  pendingFunds   Int?     @default(0)
  accountsSold   Int?     @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  analytxns analytxns[] @relation("MonthlyStatsAnalytxns")
}

model analytxns {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  month          String
  year           String
  amount         Int
  monthlyStatsId String       @db.ObjectId
  monthlyStats   MonthlyStats @relation("MonthlyStatsAnalytxns", fields: [monthlyStatsId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FundsCollected {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  Month     String
  amount    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ------------------------------ NOTIFICATIONS  -----------------------------------

model notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  image_url String?
  heading   String
  message   String
  To        SENDTO
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ------------------------------ PRODUCT MANAGEMENT  -----------------------------
model Blog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  image_url String
  Heading   String
  Article   String
  type      BLOGTYPE
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model annoucement {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  message   String
  HexaCode  String
  BgCode    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PricePanel {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  leftPanel  Json[]
  rightPanel Json[]
  Price      Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model AdServer {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  logo      String?
  feautures Json[]
  currency  Json[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ------------------------------ UTILS  --------------------------------
model invoice {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String?
  type        String?
  country     String?
  email       String
  adress      String?
  zipcode     String?
  taxOffice   String?
  Reg_number  String?
  phoneNumber String?
  model       String?
  currency    String?
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

//-------------------------------ADMIN MODEL ------------------------------
model Admin {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String   @unique
  image       String   @default("https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSzBXNuO6PezhC18aYH_2cYtS0I7KbxoKYdwA&s")
  password    String
  phoneNumber String
  adress      String
  pinCode     String
  bio         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// ------------------------------ ENUMS -----------------------------------
enum Role {
  AGENCY
  ADVERTISER
  NONE
}

enum STATUS {
  PENDING
  COMPLETED
  CANCELED
}

enum ACCMODEL {
  COMMISSION
  NONCOMMISSION
}

enum ADACCOUNT {
  TIKTOK
  GOOGLE
  META
}

enum BLOGTYPE {
  READ
  VIEW
}

enum SENDTO {
  ALL
  ACTIVE
  PAID
  CUSTOM
}

enum UserRole {
  Admin
}
